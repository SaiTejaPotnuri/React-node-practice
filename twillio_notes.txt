# Twilio Verification Integration Guide

## Prerequisites
- Express.js application
- React.js application
- Twilio free trial account
- SendGrid free trial account

## Step 1: Twilio Account Setup

### 1.1 Create Twilio Account
1. Go to [twilio.com](https://twilio.com)
2. Sign up for a free trial account
3. Note down your credentials:
   - **Account SID**
   - **Auth Token**

### 1.2 Create Verification Service
1. Login to Twilio Console
2. Navigate to **Verify** option in the side panel
3. Go to **Services**
4. Click **Create a new service**
5. Configure service options:
   - ✅ SMS
   - ✅ EMAIL
   - ✅ WHATSAPP
   - ✅ VOICE CALL
6. Click **Save**
7. Copy the generated **Service ID** (VerifiedServiceId)

### 1.3 Configure Service Settings
1. Go to the created service
2. You'll see tabs: **General**, **SMS**, **Email**, **WhatsApp**, **Voice Call**
3. Enable the channels you want to use
4. Focus on **Email** tab for this integration

## Step 2: Email Integration Setup

### 2.1 Create Email Integration
1. In Twilio service, go to **Email** tab
2. Navigate to **Integration Settings**
3. Click **Create new email integration**
4. Fill in the required fields:
   - **Integration Name**: (Your choice)
   - **"From" Email Address**: (Your verified email)
   - **"From" Name**: (Display name)
   - **SendGrid API Key**: (To be obtained from SendGrid)
   - **Template ID**: (To be created in SendGrid)

## Step 3: SendGrid Account Setup

### 3.1 Create SendGrid Account
1. Go to [sendgrid.com](https://sendgrid.com)
2. Sign up for a free trial account

### 3.2 Generate API Key
1. Login to SendGrid dashboard
2. Navigate to **Settings** → **API Keys**
3. Click **Create API Key**
4. Provide a name for the API key
5. Select **Full Access** permissions
6. Click **Save**
7. **Copy the generated API key** (you won't see it again!)
8. Paste this API key in Twilio's SendGrid API Key field

### 3.3 Create Dynamic Email Template
1. In SendGrid dashboard, go to **Email API** → **Dynamic Templates**
2. Click **Create a Dynamic Template**
3. Provide a template name
4. Note the generated **Template ID**
5. Click **Add Version**
6. Choose **Email Designer**
7. Select **HTML Code** option
8. Add the following HTML template:

```html
<html>
<body>
    <h2>Your verification code is: {{twilio_code}}</h2>
    <p>Code sent to: {{to}}</p>
    <p>Via: {{channel}}</p>
    <p>Service: {{service_name}}</p>
</body>
</html>
```

> **Important**: `{{twilio_code}}` is crucial for displaying the OTP code

9. Click **Save**
10. Copy the **Template ID**

### 3.4 Complete Twilio Integration
1. Return to Twilio Email Integration setup
2. Paste the **Template ID** from SendGrid
3. Click **Create Integration**
4. Go to **Verify** → **Services** → **Service Settings** → **Email**
5. Select the newly created integration
6. Update and save

## Step 4: Backend Implementation

### 4.1 Configuration File (`twillo.config.js`)
```javascript
module.exports = {
    twilloAccountSid: 'your_account_sid',
    twilloAuthToken: 'your_auth_token',
    twilloVerifiedServiceId: 'your_service_id'
};
```

### 4.2 Send Verification Code API
```javascript
const twilio = require('twilio');
const { twilloAccountSid, twilloAuthToken, twilloVerifiedServiceId } = require("../config/twillo.config.js");

// Initialize Twilio client
const client = twilio(twilloAccountSid, twilloAuthToken);

// Send verification code
const sendVerificationCode = async (email) => {
    try {
        const verification = await client.verify.v2
            .services(twilloVerifiedServiceId)
            .verifications
            .create({
                to: email,
                channel: 'email',
                locale: 'en'
            });
        
        return verification;
    } catch (error) {
        throw new Error(`Failed to send verification: ${error.message}`);
    }
};
```

### 4.3 Verify Code API
```javascript
// Verify the code
const verifyCode = async (email, otp) => {
    try {
        const verificationCheck = await client.verify.v2
            .services(twilloVerifiedServiceId)
            .verificationChecks
            .create({
                to: email,
                code: otp
            });
        
        return verificationCheck;
    } catch (error) {
        throw new Error(`Failed to verify code: ${error.message}`);
    }
};
```

## Step 5: Express.js Routes

### 5.1 Send OTP Route
```javascript
app.post('/api/send-otp', async (req, res) => {
    try {
        const { email } = req.body;
        const verification = await sendVerificationCode(email);
        
        res.status(200).json({
            success: true,
            message: 'Verification code sent successfully',
            sid: verification.sid
        });
    } catch (error) {
        res.status(500).json({
            success: false,
            message: error.message
        });
    }
});
```

### 5.2 Verify OTP Route
```javascript
app.post('/api/verify-otp', async (req, res) => {
    try {
        const { email, otp } = req.body;
        const verificationCheck = await verifyCode(email, otp);
        
        if (verificationCheck.status === 'approved') {
            res.status(200).json({
                success: true,
                message: 'Code verified successfully'
            });
        } else {
            res.status(400).json({
                success: false,
                message: 'Invalid verification code'
            });
        }
    } catch (error) {
        res.status(500).json({
            success: false,
            message: error.message
        });
    }
});
```

## Step 6: React.js Implementation

### 6.1 OTP Request Component
```javascript
const sendOTP = async (email) => {
    try {
        const response = await fetch('/api/send-otp', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ email })
        });
        
        const data = await response.json();
        if (data.success) {
            alert('OTP sent to your email!');
        }
    } catch (error) {
        console.error('Error sending OTP:', error);
    }
};
```

### 6.2 OTP Verification Component
```javascript
const verifyOTP = async (email, otp) => {
    try {
        const response = await fetch('/api/verify-otp', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ email, otp })
        });
        
        const data = await response.json();
        if (data.success) {
            alert('Email verified successfully!');
        } else {
            alert('Invalid OTP. Please try again.');
        }
    } catch (error) {
        console.error('Error verifying OTP:', error);
    }
};
```

## Important Notes

### Key Variables to Collect:
- **Account SID**: From Twilio dashboard
- **Auth Token**: From Twilio dashboard  
- **Service ID**: Generated when creating verification service
- **SendGrid API Key**: From SendGrid settings
- **Template ID**: From SendGrid dynamic template

### Template Variables:
- `{{twilio_code}}`: The actual OTP code (REQUIRED)
- `{{to}}`: Recipient email address
- `{{channel}}`: Verification channel (email/sms/etc.)
- `{{service_name}}`: Your Twilio service name

### Error Handling:
- Always implement try-catch blocks
- Check verification status before proceeding
- Handle rate limiting and API errors
- Validate email format before sending

### Security Best Practices:
- Store credentials in environment variables
- Implement rate limiting on OTP endpoints
- Set OTP expiration times
- Validate input on both frontend and backend

## Testing Checklist
- [ ] Twilio account created with valid credentials
- [ ] Verification service created and configured
- [ ] SendGrid account setup with API key
- [ ] Dynamic template created with correct variables
- [ ] Email integration configured in Twilio
- [ ] Backend APIs implemented and tested
- [ ] Frontend integration working
- [ ] Error handling implemented
- [ ] Security measures in place